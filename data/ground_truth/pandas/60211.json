{
    "pr_number": 60211,
    "log_file": "60211_2025-10-08 09:36:54.json",
    "differentiating_tests": [
        {
            "test": {
                "test_code": "# Example 1:\n# Basic stacked bar with zero-height segments (from GH 59429 reproduction)\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [3, 0, 1], \"B\": [0, 2, 4], \"C\": [5, 0, 2]})\nprint(\"DataFrame:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\n# Label the top (last) container as commonly done to show final stack heights\nax.bar_label(ax.containers[-1])\n\n# Print container heights and label information\nfor i, container in enumerate(ax.containers):\n    heights = [p.get_height() for p in container]\n    ys = [p.get_y() for p in container]\n    print(f\"Container {i} heights: {heights}\")\n    print(f\"Container {i} bottom y positions: {ys}\")\n\nprint(\"Texts (label, position):\")\nfor t in ax.texts:\n    print(f\"  '{t.get_text()}', pos={t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame:\n   A  B  C\n0  3  0  5\n1  0  2  0\n2  1  4  2\nContainer 0 heights: [np.float64(3.0), np.float64(0.0), np.float64(1.0)]\nContainer 0 bottom y positions: [np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 1 heights: [np.float64(0.0), np.float64(2.0), np.float64(4.0)]\nContainer 1 bottom y positions: [np.float64(0.0), np.float64(0.0), np.float64(1.0)]\nContainer 2 heights: [np.float64(5.0), np.float64(0.0), np.float64(2.0)]\nContainer 2 bottom y positions: [np.float64(3.0), np.float64(0.0), np.float64(5.0)]\nTexts (label, position):\n  '8', pos=(0, 0)\n  '0', pos=(0, 0)\n  '7', pos=(0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame:\n   A  B  C\n0  3  0  5\n1  0  2  0\n2  1  4  2\nContainer 0 heights: [np.float64(3.0), np.float64(0.0), np.float64(1.0)]\nContainer 0 bottom y positions: [np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 1 heights: [np.float64(0.0), np.float64(2.0), np.float64(4.0)]\nContainer 1 bottom y positions: [np.float64(3.0), np.float64(0.0), np.float64(1.0)]\nContainer 2 heights: [np.float64(5.0), np.float64(0.0), np.float64(2.0)]\nContainer 2 bottom y positions: [np.float64(3.0), np.float64(2.0), np.float64(5.0)]\nTexts (label, position):\n  '8', pos=(0, 0)\n  '2', pos=(0, 0)\n  '7', pos=(0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 6:\n# Stacked bar with altered bar width and edge styling; inspect positions\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [2, 0, 1], \"B\": [0, 1, 3], \"C\": [1, 0, 0]})\nprint(\"DataFrame:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True, width=0.6, edgecolor=\"black\")\n# Label the top container\nax.bar_label(ax.containers[-1], padding=1)\n\nprint(\"Bar widths and heights per container:\")\nfor i, c in enumerate(ax.containers):\n    widths = [p.get_width() for p in c]\n    heights = [p.get_height() for p in c]\n    ys = [p.get_y() for p in c]\n    print(f\"Container {i}: widths={widths}, heights={heights}, bottoms={ys}\")\n\nfor t in ax.texts:\n    print(f\"Label '{t.get_text()}' at {t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame:\n   A  B  C\n0  2  0  1\n1  0  1  0\n2  1  3  0\nBar widths and heights per container:\nContainer 0: widths=[np.float64(0.6), np.float64(0.6), np.float64(0.6)], heights=[np.float64(2.0), np.float64(0.0), np.float64(1.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 1: widths=[np.float64(0.6), np.float64(0.6), np.float64(0.6)], heights=[np.float64(0.0), np.float64(1.0), np.float64(3.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(1.0)]\nContainer 2: widths=[np.float64(0.6), np.float64(0.6), np.float64(0.6)], heights=[np.float64(1.0), np.float64(0.0), np.float64(0.0)], bottoms=[np.float64(2.0), np.float64(0.0), np.float64(0.0)]\nLabel '3' at (0, 1)\nLabel '0' at (0, 1)\nLabel '0' at (0, 1)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame:\n   A  B  C\n0  2  0  1\n1  0  1  0\n2  1  3  0\nBar widths and heights per container:\nContainer 0: widths=[np.float64(0.6), np.float64(0.6), np.float64(0.6)], heights=[np.float64(2.0), np.float64(0.0), np.float64(1.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 1: widths=[np.float64(0.6), np.float64(0.6), np.float64(0.6)], heights=[np.float64(0.0), np.float64(1.0), np.float64(3.0)], bottoms=[np.float64(2.0), np.float64(0.0), np.float64(1.0)]\nContainer 2: widths=[np.float64(0.6), np.float64(0.6), np.float64(0.6)], heights=[np.float64(1.0), np.float64(0.0), np.float64(0.0)], bottoms=[np.float64(2.0), np.float64(1.0), np.float64(4.0)]\nLabel '3' at (0, 1)\nLabel '1' at (0, 1)\nLabel '4' at (0, 1)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 7:\n# Label rotation and padding applied to stacked bars\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [4, 0, 2], \"B\": [0, 2, 0], \"C\": [1, 0, 3]})\nprint(\"DataFrame:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\n# Rotate labels and apply padding to see how placement changes visually and numerically\nfor c in ax.containers:\n    ax.bar_label(c, padding=3, rotation=45)\n\nfor t in ax.texts:\n    print(f\"Label '{t.get_text()}' at pos={t.get_position()} rotated={t.get_rotation()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame:\n   A  B  C\n0  4  0  1\n1  0  2  0\n2  2  0  3\nLabel '4' at pos=(0, 3) rotated=45.0\nLabel '0' at pos=(0, 3) rotated=45.0\nLabel '2' at pos=(0, 3) rotated=45.0\nLabel '0' at pos=(0, 3) rotated=45.0\nLabel '2' at pos=(0, 3) rotated=45.0\nLabel '0' at pos=(0, 3) rotated=45.0\nLabel '5' at pos=(0, 3) rotated=45.0\nLabel '0' at pos=(0, 3) rotated=45.0\nLabel '5' at pos=(0, 3) rotated=45.0\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame:\n   A  B  C\n0  4  0  1\n1  0  2  0\n2  2  0  3\nLabel '4' at pos=(0, 3) rotated=45.0\nLabel '0' at pos=(0, 3) rotated=45.0\nLabel '2' at pos=(0, 3) rotated=45.0\nLabel '4' at pos=(0, 3) rotated=45.0\nLabel '2' at pos=(0, 3) rotated=45.0\nLabel '2' at pos=(0, 3) rotated=45.0\nLabel '5' at pos=(0, 3) rotated=45.0\nLabel '2' at pos=(0, 3) rotated=45.0\nLabel '5' at pos=(0, 3) rotated=45.0\n"
            },
            "label": "intended",
            "comment": "unsure"
        },
        {
            "test": {
                "test_code": "# Example 8:\n# Categorical index with stacked bars: check label Y positions\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [1, 0, 3], \"B\": [0, 2, 1]}, index=[\"cat1\", \"cat2\", \"cat3\"])\nprint(\"DataFrame with categorical index:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\nax.bar_label(ax.containers[-1])\n\nprint(\"Container heights per category (by x position):\")\nfor i, c in enumerate(ax.containers):\n    print(f\"Container {i}: {[p.get_height() for p in c]}\")\n\nprint(\"Label positions (x,y):\")\nfor t in ax.texts:\n    print(f\" '{t.get_text()}', {t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with categorical index:\n      A  B\ncat1  1  0\ncat2  0  2\ncat3  3  1\nContainer heights per category (by x position):\nContainer 0: [np.float64(1.0), np.float64(0.0), np.float64(3.0)]\nContainer 1: [np.float64(0.0), np.float64(2.0), np.float64(1.0)]\nLabel positions (x,y):\n '0', (0, 0)\n '2', (0, 0)\n '4', (0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with categorical index:\n      A  B\ncat1  1  0\ncat2  0  2\ncat3  3  1\nContainer heights per category (by x position):\nContainer 0: [np.float64(1.0), np.float64(0.0), np.float64(3.0)]\nContainer 1: [np.float64(0.0), np.float64(2.0), np.float64(1.0)]\nLabel positions (x,y):\n '1', (0, 0)\n '2', (0, 0)\n '4', (0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 10:\n# Stacked bar with integer vs float dtypes; check that zero integers are treated like zeros\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf_int = pd.DataFrame({\"A\": [0, 2], \"B\": [3, 0]}, dtype=int)\ndf_float = pd.DataFrame({\"A\": [0.0, 2.0], \"B\": [3.0, 0.0]}, dtype=float)\n\nprint(\"Integer DataFrame:\\n\", df_int, sep=\"\")\nax1 = df_int.plot.bar(stacked=True)\nax1.bar_label(ax1.containers[-1])\nfor t in ax1.texts:\n    print(\"int labels:\", t.get_text(), t.get_position())\nplt.close(ax1.figure)\n\nprint(\"\\nFloat DataFrame:\\n\", df_float, sep=\"\")\nax2 = df_float.plot.bar(stacked=True)\nax2.bar_label(ax2.containers[-1])\nfor t in ax2.texts:\n    print(\"float labels:\", t.get_text(), t.get_position())",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nInteger DataFrame:\n   A  B\n0  0  3\n1  2  0\nint labels: 3 (0, 0)\nint labels: 0 (0, 0)\n\nFloat DataFrame:\n     A    B\n0  0.0  3.0\n1  2.0  0.0\nfloat labels: 3 (0, 0)\nfloat labels: 0 (0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nInteger DataFrame:\n   A  B\n0  0  3\n1  2  0\nint labels: 3 (0, 0)\nint labels: 2 (0, 0)\n\nFloat DataFrame:\n     A    B\n0  0.0  3.0\n1  2.0  0.0\nfloat labels: 3 (0, 0)\nfloat labels: 2 (0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 12:\n# Corner case: NaN values inside the DataFrame\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [np.nan, 1, 0], \"B\": [2, np.nan, 3], \"C\": [0, 0, np.nan]})\nprint(\"DataFrame with NaN values:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\n# Attempt to label the top container - observe how NaNs affect heights and labels\ntry:\n    ax.bar_label(ax.containers[-1])\nexcept Exception as e:\n    print(\"bar_label raised:\", repr(e))\n\nfor i, c in enumerate(ax.containers):\n    heights = [p.get_height() for p in c]\n    bottoms = [p.get_y() for p in c]\n    print(f\"Container {i}: heights={heights}, bottoms={bottoms}\")\n\nprint(\"Text labels present:\")\nfor t in ax.texts:\n    print(f\" '{t.get_text()}', pos={t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with NaN values:\n     A    B    C\n0  NaN  2.0  0.0\n1  1.0  NaN  0.0\n2  0.0  3.0  NaN\nContainer 0: heights=[np.float64(0.0), np.float64(1.0), np.float64(0.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 1: heights=[np.float64(2.0), np.float64(0.0), np.float64(3.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 2: heights=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nText labels present:\n '0', pos=(0, 0)\n '0', pos=(0, 0)\n '0', pos=(0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with NaN values:\n     A    B    C\n0  NaN  2.0  0.0\n1  1.0  NaN  0.0\n2  0.0  3.0  NaN\nContainer 0: heights=[np.float64(0.0), np.float64(1.0), np.float64(0.0)], bottoms=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]\nContainer 1: heights=[np.float64(2.0), np.float64(0.0), np.float64(3.0)], bottoms=[np.float64(0.0), np.float64(1.0), np.float64(0.0)]\nContainer 2: heights=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], bottoms=[np.float64(2.0), np.float64(1.0), np.float64(3.0)]\nText labels present:\n '2', pos=(0, 0)\n '1', pos=(0, 0)\n '3', pos=(0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 13:\n# Corner case: None entries (converted to NaN). Behavior mirrors NaN example.\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [None, 1], \"B\": [2, None], \"C\": [0, None]})\nprint(\"DataFrame with None values:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\nax.bar_label(ax.containers[-1])\n\nfor i, c in enumerate(ax.containers):\n    print(f\"Container {i} heights: {[p.get_height() for p in c]}\")\nprint(\"Labels:\")\nfor t in ax.texts:\n    print(f\" '{t.get_text()}', pos={t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with None values:\n     A    B    C\n0  NaN  2.0  0.0\n1  1.0  NaN  NaN\nContainer 0 heights: [np.float64(0.0), np.float64(1.0)]\nContainer 1 heights: [np.float64(2.0), np.float64(0.0)]\nContainer 2 heights: [np.float64(0.0), np.float64(0.0)]\nLabels:\n '0', pos=(0, 0)\n '0', pos=(0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with None values:\n     A    B    C\n0  NaN  2.0  0.0\n1  1.0  NaN  NaN\nContainer 0 heights: [np.float64(0.0), np.float64(1.0)]\nContainer 1 heights: [np.float64(2.0), np.float64(0.0)]\nContainer 2 heights: [np.float64(0.0), np.float64(0.0)]\nLabels:\n '2', pos=(0, 0)\n '1', pos=(0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 14:\n# Corner case: very small floating values around zero\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\neps = 1e-12\ndf = pd.DataFrame({\"A\": [eps, -eps, 0.0], \"B\": [0.0, eps, -eps]})\nprint(\"DataFrame with tiny floats around zero:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\nax.bar_label(ax.containers[-1], fmt=\"%.12g\")\n\nfor i, c in enumerate(ax.containers):\n    print(f\"Container {i} heights: {[p.get_height() for p in c]}\")\nprint(\"Labels (text,value):\")\nfor t in ax.texts:\n    print(f\" '{t.get_text()}', pos={t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with tiny floats around zero:\n              A             B\n0  1.000000e-12  0.000000e+00\n1 -1.000000e-12  1.000000e-12\n2  0.000000e+00 -1.000000e-12\nContainer 0 heights: [np.float64(1e-12), np.float64(-1e-12), np.float64(0.0)]\nContainer 1 heights: [np.float64(0.0), np.float64(1e-12), np.float64(-1e-12)]\nLabels (text,value):\n '0', pos=(0, 0)\n '1e-12', pos=(0, 0)\n '-1e-12', pos=(0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with tiny floats around zero:\n              A             B\n0  1.000000e-12  0.000000e+00\n1 -1.000000e-12  1.000000e-12\n2  0.000000e+00 -1.000000e-12\nContainer 0 heights: [np.float64(1e-12), np.float64(-1e-12), np.float64(0.0)]\nContainer 1 heights: [np.float64(0.0), np.float64(1e-12), np.float64(-1e-12)]\nLabels (text,value):\n '1e-12', pos=(0, 0)\n '1e-12', pos=(0, 0)\n '-1e-12', pos=(0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 16:\n# Corner case: single-row DataFrame (one index) with zeros in-between\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame({\"A\": [0], \"B\": [2], \"C\": [0]}, index=[\"onlyrow\"])\nprint(\"Single-row DataFrame:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True)\nax.bar_label(ax.containers[-1])\n\nfor i, c in enumerate(ax.containers):\n    print(f\"Container {i} heights: {[p.get_height() for p in c]}, bottoms: {[p.get_y() for p in c]}\")\n\nprint(\"Labels:\")\nfor t in ax.texts:\n    print(f\" '{t.get_text()}', pos={t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nSingle-row DataFrame:\n         A  B  C\nonlyrow  0  2  0\nContainer 0 heights: [np.float64(0.0)], bottoms: [np.float64(0.0)]\nContainer 1 heights: [np.float64(2.0)], bottoms: [np.float64(0.0)]\nContainer 2 heights: [np.float64(0.0)], bottoms: [np.float64(0.0)]\nLabels:\n '0', pos=(0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nSingle-row DataFrame:\n         A  B  C\nonlyrow  0  2  0\nContainer 0 heights: [np.float64(0.0)], bottoms: [np.float64(0.0)]\nContainer 1 heights: [np.float64(2.0)], bottoms: [np.float64(0.0)]\nContainer 2 heights: [np.float64(0.0)], bottoms: [np.float64(2.0)]\nLabels:\n '2', pos=(0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 18:\n# Corner case: many zero columns to illustrate potential overlapping label positions\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 8 columns, many zeros with a few positives\ndf = pd.DataFrame({\n    \"c0\": [0, 1],\n    \"c1\": [0, 0],\n    \"c2\": [0, 0],\n    \"c3\": [2, 0],\n    \"c4\": [0, 0],\n    \"c5\": [0, 3],\n    \"c6\": [0, 0],\n    \"c7\": [0, 0]\n})\nprint(\"Wide DataFrame with many zero columns:\\n\", df, sep=\"\")\n\nax = df.plot.bar(stacked=True, figsize=(6,4))\nax.bar_label(ax.containers[-1])\n\nprint(\"Heights per container:\")\nfor i, c in enumerate(ax.containers):\n    print(f\"Container {i} heights: {[p.get_height() for p in c]}\")\n\nprint(\"Labels and positions:\")\nfor t in ax.texts:\n    print(f\" '{t.get_text()}', pos={t.get_position()}\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nWide DataFrame with many zero columns:\n   c0  c1  c2  c3  c4  c5  c6  c7\n0   0   0   0   2   0   0   0   0\n1   1   0   0   0   0   3   0   0\nHeights per container:\nContainer 0 heights: [np.float64(0.0), np.float64(1.0)]\nContainer 1 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 2 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 3 heights: [np.float64(2.0), np.float64(0.0)]\nContainer 4 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 5 heights: [np.float64(0.0), np.float64(3.0)]\nContainer 6 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 7 heights: [np.float64(0.0), np.float64(0.0)]\nLabels and positions:\n '0', pos=(0, 0)\n '0', pos=(0, 0)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nWide DataFrame with many zero columns:\n   c0  c1  c2  c3  c4  c5  c6  c7\n0   0   0   0   2   0   0   0   0\n1   1   0   0   0   0   3   0   0\nHeights per container:\nContainer 0 heights: [np.float64(0.0), np.float64(1.0)]\nContainer 1 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 2 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 3 heights: [np.float64(2.0), np.float64(0.0)]\nContainer 4 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 5 heights: [np.float64(0.0), np.float64(3.0)]\nContainer 6 heights: [np.float64(0.0), np.float64(0.0)]\nContainer 7 heights: [np.float64(0.0), np.float64(0.0)]\nLabels and positions:\n '2', pos=(0, 0)\n '4', pos=(0, 0)\n"
            },
            "label": "intended",
            "comment": ""
        }
    ]
}