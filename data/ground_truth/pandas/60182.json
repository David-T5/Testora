{
    "pr_number": 60182,
    "log_file": "60182_2025-10-07 13:00:31.json",
    "differentiating_tests": [
        {
            "test": {
                "test_code": "# Example 1:\n# MultiIndex as ROW index with a Period level -> to_excel() then read_excel() preserves values\nimport pandas as pd\nfrom io import BytesIO\n\n# Create DataFrame with MultiIndex rows: Period level + category\nperiods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"X\", \"Y\"]], names=[\"date\", \"category\"])\ndf = pd.DataFrame({\"A\": [1, 2]}, index=idx)\n\nprint(\"Original df:\")\nprint(df)\nprint(\"Original index level 0 type:\", type(df.index.levels[0][0]), \" (expect pandas.Period)\")\n\n# Write to an in-memory Excel file and read back\nbuf = BytesIO()\ndf.to_excel(buf, merge_cells=True)  # default engine writes .xlsx in memory\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back df:\")\nprint(res)\nprint(\"Read index level 0 type:\", type(res.index.levels[0][0]), \" (expect pandas.Timestamp)\")",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal df:\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nOriginal index level 0 type: <class 'pandas.Period'>  (expect pandas.Period)\n\nRead-back df:\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nRead index level 0 type: <class 'str'>  (expect pandas.Timestamp)\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal df:\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nOriginal index level 0 type: <class 'pandas.Period'>  (expect pandas.Period)\n\nRead-back df:\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nRead index level 0 type: <class 'pandas.Timestamp'>  (expect pandas.Timestamp)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 2:\n# Same as Example 1 but with merge_cells=False to show merge_cells variation doesn't stop Period->Timestamp conversion\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"X\", \"Y\"]], names=[\"date\", \"category\"])\ndf = pd.DataFrame({\"A\": [1, 2]}, index=idx)\n\nprint(\"Original df:\")\nprint(df)\nprint(\"Original index sample:\", df.index[0])\n\nbuf = BytesIO()\ndf.to_excel(buf, merge_cells=False)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back df (merge_cells=False):\")\nprint(res)\nprint(\"Read index sample:\", res.index[0])",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal df:\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nOriginal index sample: (Period('2006-10-06', 'D'), 'X')\n\nRead-back df (merge_cells=False):\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nRead index sample: ('2006-10-06', 'X')\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal df:\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nOriginal index sample: (Period('2006-10-06', 'D'), 'X')\n\nRead-back df (merge_cells=False):\n                     A\ndate       category   \n2006-10-06 X         1\n2006-10-07 Y         2\nRead index sample: (Timestamp('2006-10-06 00:00:00'), 'X')\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 3:\n# Use merge_cells='columns' (affects column merging) while Period is in the ROW index\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"X\", \"Y\"]], names=[\"date\", \"category\"])\ndf = pd.DataFrame({\"A\": [10, 20]}, index=idx)\n\nprint(\"Original index types and values:\")\nprint(df.index)\nprint(\"Level 0 (Periods):\", df.index.levels[0])\n\nbuf = BytesIO()\ndf.to_excel(buf, merge_cells=\"columns\")\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back index levels:\")\nprint(res.index.levels)",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index types and values:\nMultiIndex([('2006-10-06', 'X'),\n            ('2006-10-07', 'Y')],\n           names=['date', 'category'])\nLevel 0 (Periods): PeriodIndex(['2006-10-06', '2006-10-07'], dtype='period[D]', name='date')\n\nRead-back index levels:\n[['2006-10-06', '2006-10-07'], ['X', 'Y']]\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index types and values:\nMultiIndex([('2006-10-06', 'X'),\n            ('2006-10-07', 'Y')],\n           names=['date', 'category'])\nLevel 0 (Periods): PeriodIndex(['2006-10-06', '2006-10-07'], dtype='period[D]', name='date')\n\nRead-back index levels:\n[[2006-10-06 00:00:00, 2006-10-07 00:00:00], ['X', 'Y']]\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 7:\n# PERIODS present in both ROW and COLUMN MultiIndex levels simultaneously\nimport pandas as pd\nfrom io import BytesIO\n\nrow_periods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\")\ncol_periods = pd.period_range(\"2006-11-01\", periods=2, freq=\"M\")\nrows = pd.MultiIndex.from_arrays([row_periods, [\"A\", \"B\"]], names=[\"rdate\", \"rcat\"])\ncols = pd.MultiIndex.from_arrays([col_periods, [\"m1\", \"m2\"]], names=[\"cdate\", \"m\"])\ndf = pd.DataFrame([[1, 2], [3, 4]], index=rows, columns=cols)\n\nprint(\"Original index/columns types:\")\nprint(\"Index level 0 type:\", type(df.index.levels[0][0]))\nprint(\"Columns level 0 type:\", type(df.columns.levels[0][0]))\n\nbuf = BytesIO()\ndf.to_excel(buf)\nbuf.seek(0)\nres = pd.read_excel(buf, header=[0, 1], index_col=[0, 1])\n\nprint(\"\\nRead-back index/columns types:\")\nprint(\"Read index level 0 dtype:\", res.index.levels[0].dtype)",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index/columns types:\nIndex level 0 type: <class 'pandas.Period'>\nColumns level 0 type: <class 'pandas.Period'>\n\nRead-back index/columns types:\nRead index level 0 dtype: object\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index/columns types:\nIndex level 0 type: <class 'pandas.Period'>\nColumns level 0 type: <class 'pandas.Period'>\n\nRead-back index/columns types:\nRead index level 0 dtype: datetime64[us]\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 8:\n# Using an explicit ExcelWriter (openpyxl engine) while writing Period-containing MultiIndex rows\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"x\", \"y\"]], names=[\"date\", \"cat\"])\ndf = pd.DataFrame({\"val\": [5, 6]}, index=idx)\n\nprint(\"Original df:\")\nprint(df)\n\nbuf = BytesIO()\nwith pd.ExcelWriter(buf, engine=\"openpyxl\") as writer:\n    df.to_excel(writer, sheet_name=\"Sheet1\", merge_cells=True)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back (via ExcelWriter) index:\")\nprint(res.index)\nprint(\"Type of first index element:\", type(res.index[0][0]))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal df:\n                val\ndate       cat     \n2006-10-06 x      5\n2006-10-07 y      6\n\nRead-back (via ExcelWriter) index:\nMultiIndex([('2006-10-06', 'x'),\n            ('2006-10-07', 'y')],\n           names=['date', 'cat'])\nType of first index element: <class 'str'>\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal df:\n                val\ndate       cat     \n2006-10-06 x      5\n2006-10-07 y      6\n\nRead-back (via ExcelWriter) index:\nMultiIndex([('2006-10-06', 'x'),\n            ('2006-10-07', 'y')],\n           names=['date', 'cat'])\nType of first index element: <class 'pandas.Timestamp'>\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 9:\n# Writing to a temporary physical .xlsx file and reading back to show the persisted conversion\nimport pandas as pd\nimport tempfile\n\nperiods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"one\", \"two\"]], names=[\"date\", \"label\"])\ndf = pd.DataFrame({\"A\": [100, 200]}, index=idx)\n\nprint(\"Original index:\", df.index)\n\nwith tempfile.NamedTemporaryFile(suffix=\".xlsx\") as tmp:\n    df.to_excel(tmp.name)\n    # read back from the temp file\n    res = pd.read_excel(tmp.name, index_col=[0, 1])\n\nprint(\"\\nRead-back index levels and types:\")\nprint(res.index)\nprint(\"First index element type:\", type(res.index[0][0]))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index: MultiIndex([('2006-10-06', 'one'),\n            ('2006-10-07', 'two')],\n           names=['date', 'label'])\n\nRead-back index levels and types:\nMultiIndex([('2006-10-06', 'one'),\n            ('2006-10-07', 'two')],\n           names=['date', 'label'])\nFirst index element type: <class 'str'>\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index: MultiIndex([('2006-10-06', 'one'),\n            ('2006-10-07', 'two')],\n           names=['date', 'label'])\n\nRead-back index levels and types:\nMultiIndex([('2006-10-06', 'one'),\n            ('2006-10-07', 'two')],\n           names=['date', 'label'])\nFirst index element type: <class 'pandas.Timestamp'>\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 10:\n# Using Styler.to_excel (styled DataFrame) where the row index has a Period level\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006-10-06\", periods=2)\nidx = pd.MultiIndex.from_arrays([periods, [\"a\", \"b\"]], names=[\"date\", \"grp\"])\ndf = pd.DataFrame({\"val\": [7, 8]}, index=idx)\n\nprint(\"Original index type:\", type(df.index.levels[0][0]))\n\nbuf = BytesIO()\n# styled export uses the Excel formatting pipeline; we ensure Periods are handled\ndf.style.to_excel(buf, engine=\"openpyxl\")\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back from styled Excel:\")\nprint(res)\nprint(\"Read-back index element type:\", type(res.index[0][0]))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index type: <class 'pandas.Period'>\n\nRead-back from styled Excel:\n                val\ndate       grp     \n2006-10-06 a      7\n2006-10-07 b      8\nRead-back index element type: <class 'str'>\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index type: <class 'pandas.Period'>\n\nRead-back from styled Excel:\n                val\ndate       grp     \n2006-10-06 a      7\n2006-10-07 b      8\nRead-back index element type: <class 'pandas.Timestamp'>\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 11 (corner case):\n# PeriodIndex containing NaT (missing period) in a MultiIndex level -> write/read should handle NaT\nimport pandas as pd\nfrom io import BytesIO\n\n# Create a PeriodIndex with one NaT entry\nperiods = pd.PeriodIndex([\"2006-10-06\", None], freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"X\", \"Y\"]], names=[\"date\", \"cat\"])\ndf = pd.DataFrame({\"A\": [1, 2]}, index=idx)\n\nprint(\"Original index level 0 (may contain <NA>/NaT):\", df.index.levels[0])\n\nbuf = BytesIO()\ndf.to_excel(buf)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back index level 0 values:\")\nprint(res.index.get_level_values(0))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index level 0 (may contain <NA>/NaT): PeriodIndex(['2006-10-06'], dtype='period[D]', name='date')\n\nRead-back index level 0 values:\nIndex(['2006-10-06', '2006-10-06'], dtype='object', name='date')\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index level 0 (may contain <NA>/NaT): PeriodIndex(['2006-10-06'], dtype='period[D]', name='date')\n\nRead-back index level 0 values:\nDatetimeIndex(['2006-10-06', '2006-10-06'], dtype='datetime64[us]', name='date', freq=None)\n"
            },
            "label": "unintended",
            "comment": "Not sure. Cannot construct a multiIndex with an array that contains a NaT value. Original index level 0 should be: ['2006-10-06', NaT]"
        },
        {
            "test": {
                "test_code": "# Example 12 (corner case):\n# PeriodIndex with monthly frequency -> to_timestamp converts period to the period start (e.g., 2006-11-01)\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006-11\", periods=2, freq=\"M\")  # monthly Periods\nidx = pd.MultiIndex.from_arrays([periods, [\"a\", \"b\"]], names=[\"month\", \"cat\"])\ndf = pd.DataFrame({\"val\": [9, 10]}, index=idx)\n\nprint(\"Original Periods (monthly):\", df.index.levels[0])\n\nbuf = BytesIO()\ndf.to_excel(buf)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back index level 0 (timestamps):\", res.index.levels[0])",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal Periods (monthly): PeriodIndex(['2006-11', '2006-12'], dtype='period[M]', name='month')\n\nRead-back index level 0 (timestamps): Index(['2006-11', '2006-12'], dtype='object', name='month')\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal Periods (monthly): PeriodIndex(['2006-11', '2006-12'], dtype='period[M]', name='month')\n\nRead-back index level 0 (timestamps): DatetimeIndex(['2006-11-01', '2006-12-01'], dtype='datetime64[us]', name='month', freq=None)\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 13 (corner case):\n# Mixed values (Period and string) in the same index level -> some entries are Period objects while others are strings\nimport pandas as pd\nfrom io import BytesIO\n\nmixed = pd.Index([pd.Period(\"2006-10-06\"), \"STRING\"], dtype=object)\nidx = pd.MultiIndex.from_arrays([mixed, [\"a\", \"b\"]], names=[\"mixed\", \"cat\"])\ndf = pd.DataFrame({\"v\": [1, 2]}, index=idx)\n\nprint(\"Original mixed-level index values and types:\")\nfor i, v in enumerate(df.index.get_level_values(0)):\n    print(i, v, type(v))\n\nbuf = BytesIO()\ndf.to_excel(buf)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back mixed top-level index values (likely coerced):\")\nfor i, v in enumerate(res.index.get_level_values(0)):\n    print(i, v, type(v))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal mixed-level index values and types:\n0 2006-10-06 <class 'pandas.Period'>\n1 STRING <class 'str'>\n\nRead-back mixed top-level index values (likely coerced):\n0 2006-10-06 <class 'str'>\n1 STRING <class 'str'>\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal mixed-level index values and types:\n0 2006-10-06 <class 'pandas.Period'>\n1 STRING <class 'str'>\nTraceback (most recent call last):\n  File \"/tmp/Testora/Testora_test_code.py\", line 15, in <module>\n    df.to_excel(buf)\n  File \"/home/pandas/pandas/core/generic.py\", line 2302, in to_excel\n    formatter.write(\n  File \"/home/pandas/pandas/io/formats/excel.py\", line 937, in write\n    writer._write_cells(\n  File \"/home/pandas/pandas/io/excel/_xlsxwriter.py\", line 261, in _write_cells\n    for cell in cells:\n  File \"/home/pandas/pandas/io/formats/excel.py\", line 874, in get_formatted_cells\n    for cell in itertools.chain(self._format_header(), self._format_body()):\n  File \"/home/pandas/pandas/io/formats/excel.py\", line 809, in _format_hierarchical_rows\n    values = values.to_timestamp()\n             ^^^^^^^^^^^^^^^^^^^\nAttributeError: 'Index' object has no attribute 'to_timestamp'\n"
            },
            "label": "unintended",
            "comment": "Coersion to timestamp does not work as intended when multiIndex is constructed with an index object."
        },
        {
            "test": {
                "test_code": "# Example 15 (corner case):\n# Duplicate Periods in a PeriodIndex (non-unique) -> merge_cells behavior and round-trip preservation\nimport pandas as pd\nfrom io import BytesIO\n\n# Create duplicated periods manually\nperiods = pd.PeriodIndex([\"2006-10-06\", \"2006-10-06\"], freq=\"D\")\nidx = pd.MultiIndex.from_arrays([periods, [\"a\", \"b\"]], names=[\"date\", \"cat\"])\ndf = pd.DataFrame({\"val\": [11, 12]}, index=idx)\n\nprint(\"Original index (with duplicates):\")\nprint(df.index)\n\nbuf = BytesIO()\ndf.to_excel(buf, merge_cells=True)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back index (duplicates preserved):\")\nprint(res.index)\nprint(\"Index level 0 values:\", list(res.index.get_level_values(0)))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index (with duplicates):\nMultiIndex([('2006-10-06', 'a'),\n            ('2006-10-06', 'b')],\n           names=['date', 'cat'])\n\nRead-back index (duplicates preserved):\nMultiIndex([('2006-10-06', 'a'),\n            ('2006-10-06', 'b')],\n           names=['date', 'cat'])\nIndex level 0 values: ['2006-10-06', '2006-10-06']\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index (with duplicates):\nMultiIndex([('2006-10-06', 'a'),\n            ('2006-10-06', 'b')],\n           names=['date', 'cat'])\n\nRead-back index (duplicates preserved):\nMultiIndex([('2006-10-06', 'a'),\n            ('2006-10-06', 'b')],\n           names=['date', 'cat'])\nIndex level 0 values: [Timestamp('2006-10-06 00:00:00'), Timestamp('2006-10-06 00:00:00')]\n"
            },
            "label": "intended",
            "comment": ""
        },
        {
            "test": {
                "test_code": "# Example 17 (corner case):\n# Quarterly Periods ('Q') -> ensure to_timestamp conversion produces expected timestamps (start of quarter)\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006Q3\", periods=2, freq=\"Q\")\nidx = pd.MultiIndex.from_arrays([periods, [\"g1\", \"g2\"]], names=[\"quarter\", \"cat\"])\ndf = pd.DataFrame({\"x\": [1, 2]}, index=idx)\n\nprint(\"Original quarters (PeriodIndex):\", df.index.levels[0])\n\nbuf = BytesIO()\ndf.to_excel(buf)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back index level 0 (timestamps representing quarter starts):\")\nprint(res.index.levels[0])",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal quarters (PeriodIndex): PeriodIndex(['2006Q3', '2006Q4'], dtype='period[Q-DEC]', name='quarter')\n\nRead-back index level 0 (timestamps representing quarter starts):\nIndex(['2006Q3', '2006Q4'], dtype='object', name='quarter')\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal quarters (PeriodIndex): PeriodIndex(['2006Q3', '2006Q4'], dtype='period[Q-DEC]', name='quarter')\n\nRead-back index level 0 (timestamps representing quarter starts):\nDatetimeIndex(['2006-07-01', '2006-10-01'], dtype='datetime64[us]', name='quarter', freq=None)\n"
            },
            "label": "intended",
            "comment": "2006Q3 and 2006Q4 are correctly coerced to the corresponding start date."
        },
        {
            "test": {
                "test_code": "# Example 18 (corner case):\n# Casting PeriodIndex to object dtype (so values are plain Python objects) -> conversion may not be triggered uniformly\nimport pandas as pd\nfrom io import BytesIO\n\nperiods = pd.period_range(\"2006-10-06\", periods=2, freq=\"D\").astype(object)\nidx = pd.MultiIndex.from_arrays([periods, [\"x\", \"y\"]], names=[\"date_obj\", \"cat\"])\ndf = pd.DataFrame({\"v\": [42, 43]}, index=idx)\n\nprint(\"Original index level 0 (object dtype):\", df.index.levels[0])\nprint(\"Type of element:\", type(df.index.levels[0][0]))\n\nbuf = BytesIO()\ndf.to_excel(buf)\nbuf.seek(0)\nres = pd.read_excel(buf, index_col=[0, 1])\n\nprint(\"\\nRead-back index values and types:\")\nfor v in res.index.get_level_values(0):\n    print(v, type(v))",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index level 0 (object dtype): Index([2006-10-06, 2006-10-07], dtype='object', name='date_obj')\nType of element: <class 'pandas.Period'>\n\nRead-back index values and types:\n2006-10-06 <class 'str'>\n2006-10-07 <class 'str'>\n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nOriginal index level 0 (object dtype): Index([2006-10-06, 2006-10-07], dtype='object', name='date_obj')\nType of element: <class 'pandas.Period'>\nTraceback (most recent call last):\n  File \"/tmp/Testora/Testora_test_code.py\", line 14, in <module>\n    df.to_excel(buf)\n  File \"/home/pandas/pandas/core/generic.py\", line 2302, in to_excel\n    formatter.write(\n  File \"/home/pandas/pandas/io/formats/excel.py\", line 937, in write\n    writer._write_cells(\n  File \"/home/pandas/pandas/io/excel/_xlsxwriter.py\", line 261, in _write_cells\n    for cell in cells:\n  File \"/home/pandas/pandas/io/formats/excel.py\", line 874, in get_formatted_cells\n    for cell in itertools.chain(self._format_header(), self._format_body()):\n  File \"/home/pandas/pandas/io/formats/excel.py\", line 809, in _format_hierarchical_rows\n    values = values.to_timestamp()\n             ^^^^^^^^^^^^^^^^^^^\nAttributeError: 'Index' object has no attribute 'to_timestamp'\n"
            },
            "label": "unintended",
            "comment": "Coersion to timestamp does not work as intended when multiIndex is constructed with an index object."
        },
        {
            "test": {
                "test_code": "# Example 19:\n# Corner case 9: Very large repeating Period values in MultiIndex to see merged-block representation in Excel.\nimport pandas as pd\nfrom pandas import Period\nfrom io import BytesIO\nfrom openpyxl import load_workbook\n\n# 12 rows, repeated Period level in groups to form large merged regions\ngroups = [\"G1\"]*6 + [\"G2\"]*6\nperiods = [Period(\"2021-07\", \"M\")] * 6 + [Period(\"2021-08\", \"M\")] * 6\nmi = pd.MultiIndex.from_arrays([groups, periods], names=[\"grp\", \"period\"])\ndf = pd.DataFrame({\"val\": list(range(12))}, index=mi)\nprint(\"DataFrame with long repeating Period groups:\")\nprint(df)\n\nbio = BytesIO()\ndf.to_excel(bio, sheet_name=\"x\")\nbio.seek(0)\n\nwb = load_workbook(bio)\nws = wb[\"x\"]\n\nprint(\"\\nExcel sheet excerpt (showing merged regions via top-left values and blanks):\")\nfor r in range(1, 16):\n    for c in range(1, 5):\n        cell = ws.cell(row=r, column=c)\n        print(f\"({r},{c}): {cell.value!r}\", end=\" | \")\n    print()\n    if r >= 15:\n        break",
                "old_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with long repeating Period groups:\n             val\ngrp period      \nG1  2021-07    0\n    2021-07    1\n    2021-07    2\n    2021-07    3\n    2021-07    4\n    2021-07    5\nG2  2021-08    6\n    2021-08    7\n    2021-08    8\n    2021-08    9\n    2021-08   10\n    2021-08   11\n\nExcel sheet excerpt (showing merged regions via top-left values and blanks):\n(1,1): 'grp' | (1,2): 'period' | (1,3): 'val' | (1,4): None | \n(2,1): 'G1' | (2,2): '2021-07' | (2,3): 0 | (2,4): None | \n(3,1): None | (3,2): '2021-07' | (3,3): 1 | (3,4): None | \n(4,1): None | (4,2): '2021-07' | (4,3): 2 | (4,4): None | \n(5,1): None | (5,2): '2021-07' | (5,3): 3 | (5,4): None | \n(6,1): None | (6,2): '2021-07' | (6,3): 4 | (6,4): None | \n(7,1): None | (7,2): '2021-07' | (7,3): 5 | (7,4): None | \n(8,1): 'G2' | (8,2): '2021-08' | (8,3): 6 | (8,4): None | \n(9,1): None | (9,2): '2021-08' | (9,3): 7 | (9,4): None | \n(10,1): None | (10,2): '2021-08' | (10,3): 8 | (10,4): None | \n(11,1): None | (11,2): '2021-08' | (11,3): 9 | (11,4): None | \n(12,1): None | (12,2): '2021-08' | (12,3): 10 | (12,4): None | \n(13,1): None | (13,2): '2021-08' | (13,3): 11 | (13,4): None | \n(14,1): None | (14,2): None | (14,3): None | (14,4): None | \n(15,1): None | (15,2): None | (15,3): None | (15,4): None | \n",
                "new_output": "  self.warn(\"--include is ignored because --source is set\", slug=\"include-ignored\")\nDataFrame with long repeating Period groups:\n             val\ngrp period      \nG1  2021-07    0\n    2021-07    1\n    2021-07    2\n    2021-07    3\n    2021-07    4\n    2021-07    5\nG2  2021-08    6\n    2021-08    7\n    2021-08    8\n    2021-08    9\n    2021-08   10\n    2021-08   11\n\nExcel sheet excerpt (showing merged regions via top-left values and blanks):\n(1,1): 'grp' | (1,2): 'period' | (1,3): 'val' | (1,4): None | \n(2,1): 'G1' | (2,2): datetime.datetime(2021, 7, 1, 0, 0) | (2,3): 0 | (2,4): None | \n(3,1): None | (3,2): datetime.datetime(2021, 7, 1, 0, 0) | (3,3): 1 | (3,4): None | \n(4,1): None | (4,2): datetime.datetime(2021, 7, 1, 0, 0) | (4,3): 2 | (4,4): None | \n(5,1): None | (5,2): datetime.datetime(2021, 7, 1, 0, 0) | (5,3): 3 | (5,4): None | \n(6,1): None | (6,2): datetime.datetime(2021, 7, 1, 0, 0) | (6,3): 4 | (6,4): None | \n(7,1): None | (7,2): datetime.datetime(2021, 7, 1, 0, 0) | (7,3): 5 | (7,4): None | \n(8,1): 'G2' | (8,2): datetime.datetime(2021, 8, 1, 0, 0) | (8,3): 6 | (8,4): None | \n(9,1): None | (9,2): datetime.datetime(2021, 8, 1, 0, 0) | (9,3): 7 | (9,4): None | \n(10,1): None | (10,2): datetime.datetime(2021, 8, 1, 0, 0) | (10,3): 8 | (10,4): None | \n(11,1): None | (11,2): datetime.datetime(2021, 8, 1, 0, 0) | (11,3): 9 | (11,4): None | \n(12,1): None | (12,2): datetime.datetime(2021, 8, 1, 0, 0) | (12,3): 10 | (12,4): None | \n(13,1): None | (13,2): datetime.datetime(2021, 8, 1, 0, 0) | (13,3): 11 | (13,4): None | \n(14,1): None | (14,2): None | (14,3): None | (14,4): None | \n(15,1): None | (15,2): None | (15,3): None | (15,4): None | \n"
            },
            "label": "intended",
            "comment": ""
        }
    ]
}